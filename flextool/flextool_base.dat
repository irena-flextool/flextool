set upDown := up down;

set sense := greater_than, less_than, equal;
set sense_greater_than := greater_than;
set sense_less_than := less_than;
set sense_equal := equal;

set ct_method := 
  none
  constant_efficiency
  min_load_efficiency
  no_losses_no_variable_cost
  variable_cost_only
  regular
  exact
;
set ct_method_constant := constant_efficiency;
set ct_method_regular := regular;

set startup_method :=
  no_startup
  linear
  binary
;
set startup_method_no := no_startup;

set ramp_method :=
  ramp_limit
  ramp_cost
  both
;

set fork_method :=
  fork_no
  fork_yes
; 
set fork_method_yes := fork_yes;
set fork_method_no := fork_no;

set ramp_cost_method := ramp_cost both;
set ramp_limit_method := ramp_limit both;

set node_type := balance_within_period;

set method :=
  method_1way_1var_off
  method_1way_1var_LP
  method_1way_1var_MIP
  method_1way_nvar_off
  method_1way_nvar_LP
  method_1way_nvar_MIP
  method_2way_1var_off
  method_2way_2var_off
  method_2way_2var_exclude
  method_2way_2var_MIP_exclude
  method_2way_nvar_off
  not_applicable
;

set method_1var := method_1way_1var_off, method_2way_1var_off;
set method_1var_off := method_1way_1var_off, method_2way_1var_off; 
set method_1way_off := method_1way_1var_off, method_1way_nvar_off;
set method_2way_off := method_2way_1var_off, method_2way_2var_off, method_2way_2var_exclude, method_2way_nvar_off; 
set method_1way_1var_on := method_1way_1var_LP, method_1way_1var_MIP; 
set method_1way_nvar_on := method_1way_nvar_LP, method_1way_nvar_MIP; 
set method_1way_LP := method_1way_1var_LP, method_1way_nvar_LP;
set method_1way_MIP := method_1way_1var_MIP, method_1way_nvar_MIP;
set method_1way := method_1way_1var_off, method_1way_1var_LP, method_1way_1var_MIP, 
                   method_1way_nvar_off, method_1way_nvar_LP, method_1way_nvar_MIP; 
set method_2way := method_2way_1var_off, method_2way_2var_off, method_2way_2var_exclude, 
                   method_2way_2var_MIP_exclude, method_2way_nvar_off;
set method_off := method_1way_1var_off, method_1way_nvar_off, method_2way_1var_off, 
                  method_2way_2var_exclude, method_2way_2var_off, method_2way_nvar_off;  
set method_1way_on := method_1way_1var_LP, method_1way_1var_MIP, 
                      method_1way_nvar_LP, method_1way_nvar_MIP; 
set method_2way_on := method_2way_2var_exclude, method_2way_2var_MIP_exclude;
set method_on := method_1way_1var_LP, method_1way_1var_MIP, method_1way_nvar_LP, 
                 method_1way_nvar_MIP, method_2way_2var_MIP_exclude;
set method_nvar := method_1way_nvar_off, method_1way_nvar_LP, method_1way_nvar_MIP, 
                   method_2way_nvar_off;

set method_1way_1var := method_1way_1var_off, method_1way_1var_LP, method_1way_1var_MIP;
set method_2way_1var := method_2way_1var_off;
set method_2way_2var := method_2way_2var_off, method_2way_2var_exclude, method_2way_2var_MIP_exclude;
set method_2way_nvar := method_2way_nvar_off;
set method_LP := method_1way_1var_LP, method_1way_nvar_LP;
set method_MIP := method_1way_1var_MIP, method_1way_nvar_MIP, method_2way_2var_MIP_exclude;
set method_direct := method_1way_1var_off, method_1way_1var_LP, method_1way_1var_MIP, 
                     method_2way_1var_off, method_2way_2var_off, method_2way_2var_exclude, 
					 method_2way_2var_MIP_exclude;
set method_indirect := method_1way_nvar_off, method_1way_nvar_LP, method_1way_nvar_MIP, 
                       method_2way_nvar_off;
set method_1var_per_way := method_1way_1var_off, method_1way_1var_LP, method_1way_1var_MIP, 
                           method_2way_2var_off, method_2way_2var_exclude, method_2way_2var_MIP_exclude;

set methods := 
(constant_efficiency, no_startup, fork_no, method_1way_1var_off)
(constant_efficiency, no_startup, fork_yes, method_1way_nvar_off)
(constant_efficiency, linear, fork_no, method_1way_1var_LP)
(constant_efficiency, linear, fork_yes, method_1way_nvar_LP)
(constant_efficiency, binary, fork_no, method_1way_1var_MIP)
(constant_efficiency, binary, fork_yes, method_1way_nvar_MIP)
(no_losses_no_variable_cost, no_startup, fork_no, method_2way_1var_off)
(no_losses_no_variable_cost, no_startup, fork_yes, method_2way_nvar_off)
(variable_cost_only, no_startup, fork_no, method_2way_2var_off)
(variable_cost_only, no_startup, fork_yes, method_2way_nvar_off)
(regular, no_startup, fork_no, method_2way_2var_exclude)
(regular, no_startup, fork_yes, not_applicable)
(exact, no_startup, fork_no, method_2way_2var_MIP_exclude)
(exact, no_startup, fork_yes, not_applicable)
(min_load_efficiency, no_startup, fork_no, not_applicable)
(min_load_efficiency, no_startup, fork_yes, not_applicable)
(min_load_efficiency, linear, fork_no, method_1way_1var_LP)
(min_load_efficiency, linear, fork_yes, method_1way_nvar_LP)
(min_load_efficiency, binary, fork_no, method_1way_1var_MIP)
(min_load_efficiency, binary, fork_yes, method_1way_nvar_MIP)
(none, no_startup, fork_no, method_1way_1var_off)
(none, no_startup, fork_yes, method_1way_nvar_off)
(none, linear, fork_no, method_1way_1var_LP)
(none, linear, fork_yes, method_1way_nvar_LP)
(none, binary, fork_no, method_1way_1var_MIP)
(none, binary, fork_yes, method_1way_nvar_MIP)
;

set commodityParam := price, co2_content;
set commodityPeriodParam := price;
set commodityTimeParam := price;
set processParam := efficiency existing fixed_cost interest_rate invest_cost salvage_value
                    invest_max_period invest_max_total lifetime
					invest_min_period invest_min_total
					cumulative_max_capacity cumulative_min_capacity
                    retire_forced retire_max_period retire_max_total retire_min_total other_operational_cost 
					efficiency_at_min_load min_load min_downtime min_uptime
					startup_cost virtual_unitsize availability;
set processPeriodParam := fixed_cost interest_rate invest_cost salvage_value
                    invest_max_period invest_min_period
					cumulative_max_capacity cumulative_min_capacity
					lifetime other_operational_cost startup_cost
                    retire_forced retire_max_period retire_min_period, existing;
set processPeriodParamRequired :=  fixed_cost other_operational_cost lifetime existing;
set processPeriodParamInvest := interest_rate invest_cost salvage_value
                    invest_max_period invest_min_period
					cumulative_max_capacity cumulative_min_capacity
                    retire_forced retire_max_period retire_min_period;
set processTimeParam := efficiency efficiency_at_min_load min_load other_operational_cost availability;
set processTimeParamRequired := efficiency other_operational_cost availability;
set processParam_def1:= efficiency availability;
set sourceSinkParam := efficiency, efficiency_at_min_load, min_load, coefficient, flow_unitsize, other_operational_cost, ramp_cost, ramp_speed_up, ramp_speed_down, inertia_constant;
set sourceSinkTimeParam := efficiency, efficiency_at_min_load, min_load, other_operational_cost;
set sourceSinkTimeParamRequired := efficiency, other_operational_cost;
set sourceSinkPeriodParam := efficiency, efficiency_at_min_load, min_load, other_operational_cost;
set sourceSinkPeriodParamRequired := efficiency, other_operational_cost;
set nodeParam := annual_flow, peak_inflow, existing, fixed_cost, inflow, interest_rate, invest_cost, salvage_value,
                 invest_max_total, invest_min_total, lifetime,
				 invest_max_period, invest_min_period, retire_max_period, retire_min_period,
				 cumulative_max_capacity, cumulative_min_capacity,
                 penalty_down, penalty_up, retire_forced, retire_min_total, 
				 retire_max_total, self_discharge_loss, virtual_unitsize,
				 storage_state_start, storage_state_end, storage_state_reference_value,
				 storage_state_reference_price, availability;
set nodePeriodParam := annual_flow, peak_inflow, fixed_cost, interest_rate, invest_cost, salvage_value,
                 invest_max_period, invest_min_period, lifetime,
				 cumulative_max_capacity, cumulative_min_capacity,
                 retire_forced, retire_max_period, retire_min_period, virtual_unitsize,
				 storage_state_reference_price, existing, penalty_up, penalty_down;
set nodePeriodParamRequired := annual_flow, peak_inflow, fixed_cost, lifetime, storage_state_reference_price, existing, penalty_up, penalty_down;
set nodePeriodParamInvest := interest_rate, invest_cost, salvage_value,
                 invest_max_period, invest_min_period,
				 cumulative_max_capacity, cumulative_min_capacity,
                 retire_forced, retire_max_period, retire_min_period, virtual_unitsize;
set nodeTimeParam := inflow, penalty_down, penalty_up, self_discharge_loss, availability, storage_state_reference_value;
set nodeTimeParamRequired := inflow, penalty_down, penalty_up;
set nodeParam_def1 := availability;
set reserveParam := can_provide reservation reliability penalty_reserve,
                    increase_reserve_ratio large_failure_ratio max_share;
set reserveParam_def1 := reliability;
set reserveTimeParam := reservation;
set invest_method := not_allowed, invest_no_limit, invest_period, invest_total, invest_period_total, 
                  retire_no_limit, retire_period, retire_total, retire_period_total, 
				  invest_retire_no_limit, invest_retire_period, invest_retire_total, invest_retire_period_total,
				  cumulative_limits;
set lifetime_method := reinvest_automatic, reinvest_choice;
set lifetime_method_default := reinvest_automatic;
set co2_method := no_method, price, period, total, price_period, price_total, period_total, price_period_total;
set co2_price_method := price, price_period, price_total, price_period_total;
set co2_max_period_method := period, price_period, period_total, price_period_total;
set co2_max_total_method := total, price_total, period_total, price_period_total;
set modelParam := solveFirst, solveLast;
set groupParam := has_capacity_margin, capacity_margin, has_inertia, inertia_limit, 
                  invest_max_total, invest_min_total, invest_max_period, invest_min_period,
                  retire_max_total, retire_min_total, retire_max_period, retire_min_period,
				  non_synchronous_limit, co2_price, co2_max_period, co2_max_total, 
				  penalty_inertia, penalty_non_synchronous, max_cumulative_flow, min_cumulative_flow, 
				  max_instant_flow, min_instant_flow, output_results, penalty_capacity_margin;
set groupPeriodParam := capacity_margin, co2_price, co2_max_period, co2_max_total, inertia_limit, invest_max_period,
                  invest_min_period, max_cumulative_flow, min_cumulative_flow,
				  non_synchronous_limit, penalty_inertia, penalty_non_synchronous,
				  max_instant_flow, min_instant_flow, penalty_capacity_margin,
				  retire_max_period, retire_min_period;
set groupTimeParam := co2_price, max_instant_flow, min_instant_flow;
set invest_method_not_allowed := not_allowed, retire_period, retire_total, retire_no_limit;
set divest_method_not_allowed := not_allowed, invest_period, invest_total, invest_no_limit;
set profile_method := upper_limit lower_limit fixed;
set inflow_method := use_original scale_to_annual_flow no_inflow scale_in_proportion scale_to_annual_and_peak_flow;
set inflow_method_default := use_original;
set storage_binding_method := bind_within_timeblock bind_within_period bind_within_solve bind_within_model bind_forward_only;
set storage_binding_method_default := bind_forward_only;
set storage_start_end_method := fix_start fix_end fix_start_end fix_nothing;
set storage_solve_horizon_method := free use_reference_value use_reference_price;
set storage_nested_fix_method := fix_nothing fix_quantity fix_price fix_usage;
set reserve_method := no_reserve timeseries_only dynamic_only both;

set def_optional_outputs :=
  (output_unit__node_flow_t, yes)
  (output_connection__node__node_flow_t, yes)
  (output_node_balance_t, yes)
  (output_unit__node_ramp_t, no)
  (output_ramp_envelope, no)
  (output_connection_flow_separate, no);

set param_costs := "unit investment/retirement","connection investment/retirement","storage investment/retirement",
                   "fixed cost of existing assets",commodity,CO2,"variable cost",starts,"upward penalty","downward penalty",
				   "inertia penalty","non-synchronous penalty","capacity margin penalty","upward reserve penalty",
				   "downward reserve penalty";

#set test_t := t0001;
#set test_dt := (23year, t000001) (23year, t000002) (23year, t026205);
set test_dt := (p2020, t0001) (p2020, t0004) (p2020, t0040);
#set test_dt := (p2020, t2589) (p2020, t2590) (p2020, t2591);
#set test_dt := (p2020, t0001) (p2020, t0009) (p2020, t0015) (p2020, t0020) (p2020, t0024);

#set test_dt := (per1, t0002) (per1, t0015) (branch1, t0015) (branch2, t0015) (branch1, t0024) (branch2, t0024) (branch3, t0024);
#set test_dt := (1990, "2000-01-01T00:00:00") (1990, "2000-04-01T00:00:00");

param scale_the_objective := 1E-6;

end;
